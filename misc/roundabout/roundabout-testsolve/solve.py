import re


text = open("amontillado.txt").read()
words = list(set(re.sub("[^a-z]", " ", text.lower()).split()))

nodes = [('309095498', 's'), ('40516385', 'n'), ('13256506', 'p'), ('68752600', 'e'), ('210303382', 's'), ('963757395', 'd'), ('899200040', 's'), ('57956979', 'e'), ('766707594', 'r'), ('254665512', 'e'), ('783489076', 'u'), ('964617250', 'i'), ('929422840', 'm'), ('274319136', 'd'), ('898432672', 'f'), ('412467412', 's'), ('534326822', 'y'), ('233059319', 'p'), ('1011921000', 'i'), ('39906007', 'a'), ('176950184', 'i'), ('565386736', 'u'), ('233210874', 'r'), ('260511325', 'g'), ('865566496', 'b'), ('252426473', 'l'), ('781436896', 's'), ('616075416', 'n'), ('225030725', 'i'), ('245944228', 't')]

edges = [(899200040, 254665512), (766707594, 309095498), (963757395, 766707594), (929422840, 68752600), (57956979, 781436896), (412467412, 781436896), (963757395, 898432672), (40516385, 1011921000), (898432672, 963757395), (616075416, 1011921000), (766707594, 783489076), (865566496, 783489076), (260511325, 963757395), (274319136, 899200040), (309095498, 616075416), (176950184, 57956979), (565386736, 39906007), (254665512, 616075416), (260511325, 865566496), (13256506, 412467412), (260511325, 40516385), (233210874, 57956979), (865566496, 929422840), (233059319, 274319136), (964617250, 1011921000), (57956979, 1011921000), (210303382, 176950184), (616075416, 260511325), (565386736, 898432672), (68752600, 898432672), (309095498, 233059319), (39906007, 245944228), (39906007, 68752600), (929422840, 68752600), (39906007, 233059319), (210303382, 225030725), (252426473, 57956979), (963757395, 929422840), (899200040, 929422840), (963757395, 233059319), (781436896, 40516385), (260511325, 1011921000), (68752600, 1011921000), (309095498, 899200040), (899200040, 929422840), (252426473, 309095498), (412467412, 781436896), (254665512, 963757395), (565386736, 176950184), (233210874, 963757395), (898432672, 40516385), (781436896, 233059319), (233210874, 57956979), (68752600, 964617250), (766707594, 13256506), (13256506, 260511325), (233210874, 233059319), (1011921000, 309095498), (899200040, 233210874), (412467412, 274319136), (929422840, 766707594), (210303382, 254665512), (963757395, 964617250), (225030725, 963757395), (412467412, 899200040), (412467412, 57956979), (13256506, 783489076), (899200040, 176950184), (1011921000, 39906007), (783489076, 210303382), (57956979, 309095498), (898432672, 865566496), (57956979, 176950184), (233210874, 964617250), (57956979, 233210874), (963757395, 565386736), (57956979, 898432672), (39906007, 929422840), (254665512, 1011921000), (40516385, 766707594), (245944228, 616075416), (13256506, 781436896), (40516385, 260511325), (963757395, 616075416), (783489076, 565386736), (210303382, 260511325), (899200040, 616075416), (898432672, 1011921000), (274319136, 254665512), (899200040, 781436896), (260511325, 783489076), (68752600, 899200040), (616075416, 68752600), (254665512, 210303382), (964617250, 309095498), (783489076, 274319136), (534326822, 929422840), (233059319, 963757395), (783489076, 412467412), (899200040, 274319136), (865566496, 534326822), (210303382, 781436896), (233210874, 412467412), (534326822, 260511325), (929422840, 176950184), (783489076, 254665512), (233210874, 565386736), (964617250, 783489076), (898432672, 252426473), (176950184, 766707594), (233059319, 233210874), (254665512, 898432672), (898432672, 1011921000), (225030725, 245944228), (565386736, 865566496), (781436896, 616075416), (176950184, 1011921000), (766707594, 39906007), (39906007, 254665512), (40516385, 225030725), (616075416, 176950184), (898432672, 766707594), (766707594, 176950184), (39906007, 40516385), (565386736, 412467412), (898432672, 865566496), (68752600, 245944228), (274319136, 39906007), (176950184, 245944228), (13256506, 233210874), (210303382, 1011921000), (40516385, 565386736), (964617250, 565386736), (534326822, 964617250), (309095498, 865566496), (233059319, 260511325), (534326822, 766707594), (963757395, 68752600), (1011921000, 13256506), (225030725, 963757395), (781436896, 534326822), (274319136, 245944228), (260511325, 233210874), (964617250, 210303382), (766707594, 534326822)]

nodes_l = [i[1] for i in nodes] #[i for i in "myself"]
print(nodes_l)
node_id = [int(i[0]) for i in nodes] #[i for i in range(len("myself"))] 
print(node_id)
print("Before words pruned;",len(words))
words = [i for i in words if all([l in "".join(nodes_l) for l in i])]
print("After words pruned;",len(words))
words.sort()
words = words[::-1]
print(words)


spaced_words = " " + " ".join(words)

def eatwords(s):
	if (s == ""):
		return [""]
	op = []
	for word in words:
		if (word[:len(s)] == s):
			return [s]

		if (word == s[:len(word)]):
			op += [word + " " + i for i in eatwords(s[len(word):])]
	if (op == []):
		return [s]
	return op

def remainder(s):
	l = eatwords(s)
	last = l[0].split(" ")[-1]
	for i in l:
		lastcand = i.split(" ")[-1]
		if (lastcand in last):
			last = lastcand
		if (len(lastcand) < len(last)):
			last = lastcand
		if (last == ""):
			return ""
	for word in words:
		if (word[:len(last)] == last):
			return ""
	return last

print(nodes_l)
n_nodes = len(nodes_l)

print("N nodes:",n_nodes)

adj_matrix = []
for i in range(n_nodes):
	adj_matrix.append([False for _ in range(n_nodes)])

l_adj_matrix = []
for i in range(n_nodes):
	l_adj_matrix.append([False for _ in range(n_nodes)])

#print(adj_matrix)
def print_adj(adj):
	print(" "+"".join(nodes_l))
	for i in range(len(adj_matrix)):
		print(nodes_l[i] + "".join([str(int(j)) for j in adj_matrix[i]]))

for i in edges:
	a = node_id.index(i[0])
	b = node_id.index(i[1])
	#adj_matrix[a][b] = True
	adj_matrix[b][a] = True
	#adj_matrix[a][b] = True
#word = "myself"
#for i,j  in zip(word, word[1:]):
#	a = nodes_l.index(i)
#	b = nodes_l.index(j)
#	adj_matrix[a][b] = True
#	adj_matrix[b][a] = True
print_adj(adj_matrix)

def spacey(s):
	str_arr = eatwords(s)
	for str in str_arr:
		end = str.split(" ")[-1]
		x = spaced_words.find(end)
		#print(str, s, x)
		while (x != -1):
			if (spaced_words[x-1] == " "):
				return True
			x = spaced_words.find(end, x+1)
			#print(x)
	return False

#def spacey2(s):
#	str = eatwords(s)
#	cand = str[0]

itr = 0
def solve(adj, curr_path_l, str_path, depth):
	global itr
	itr += 1
	#if (depth == 2):
	#	return [""]
	if (itr % 100 == 0):
		print("\r"+str(itr)+"                          ", end="")
	# fails
	if (len(str_path) == 30):
		print("Solve Solve Solve!!!", curr_path_l, str_path)
		return [""]
	if (len(str_path) > 30):
		return [""]

	#print(depth, curr_path_l, str_path)
	#print(eatwords(str_path))

	if (not spacey(str_path)):
		#print("Not Spacey...")
		return [""]

	op = [""]
	last_idx = None
	if (str_path != ""):
		last_idx = curr_path_l[-1]

	for i in range(n_nodes):
		if (str_path != "" and not adj[last_idx][i]):
			continue
		if (i in curr_path_l):
			continue
		#recur
		op += [str_path + asd for asd in solve(adj, curr_path_l + [i], str_path + nodes_l[i], depth + 1)]
	return op
#print_adj(adj_matrix)
print(eatwords("memyselfi"))
#print("Eatwords", eatwords("mysel"))
#print("Remainder:'"+ remainder("myself")+"'")
print(solve(adj_matrix, [], "", 0))
